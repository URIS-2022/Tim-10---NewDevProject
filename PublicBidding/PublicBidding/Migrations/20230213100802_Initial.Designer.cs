// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PublicBidding.Entities;

#nullable disable

namespace PublicBidding.Migrations
{
    [DbContext(typeof(PublicBiddingContext))]
    [Migration("20230213100802_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PublicBidding.Entities.Licitation", b =>
                {
                    b.Property<Guid>("licitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("deadlineForSubmissionOfApplications")
                        .HasColumnType("datetime2");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.Property<int>("priceDifference")
                        .HasColumnType("int");

                    b.Property<Guid>("publicBiddingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("restrictions")
                        .HasColumnType("int");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("licitationId");

                    b.HasIndex("publicBiddingId");

                    b.ToTable("licitations");

                    b.HasData(
                        new
                        {
                            licitationId = new Guid("eb72c2d4-2159-4146-ad8d-11eb02791e8f"),
                            date = new DateTime(2023, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            deadlineForSubmissionOfApplications = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            number = 1,
                            priceDifference = 100,
                            publicBiddingId = new Guid("35d85c17-47a3-4c2d-831e-d9dc4243a670"),
                            restrictions = 1,
                            year = 2023
                        },
                        new
                        {
                            licitationId = new Guid("a856fea4-557f-4923-a5dc-febffd8b7744"),
                            date = new DateTime(2023, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            deadlineForSubmissionOfApplications = new DateTime(2023, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            number = 2,
                            priceDifference = 200,
                            publicBiddingId = new Guid("35d85c17-47a3-4c2d-831e-d9dc4243a670"),
                            restrictions = 1,
                            year = 2023
                        });
                });

            modelBuilder.Entity("PublicBidding.Entities.PublicBidding", b =>
                {
                    b.Property<Guid>("publicBiddingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("addressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("auctionedPrice")
                        .HasColumnType("int");

                    b.Property<Guid>("authorizedBidderPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("buyerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("circle")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("depositTopUpAmount")
                        .HasColumnType("int");

                    b.Property<bool>("excepted")
                        .HasColumnType("bit");

                    b.Property<int>("initialPricePerHectare")
                        .HasColumnType("int");

                    b.Property<int>("leasePeriod")
                        .HasColumnType("int");

                    b.Property<int>("numberOfParticipants")
                        .HasColumnType("int");

                    b.Property<Guid>("statusOfPublicBiddingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("timeOfBeginning")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("timeOfEnd")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("typePublicBiddingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("publicBiddingId");

                    b.HasIndex("statusOfPublicBiddingId");

                    b.HasIndex("typePublicBiddingId");

                    b.ToTable("publicBiddings");

                    b.HasData(
                        new
                        {
                            publicBiddingId = new Guid("35d85c17-47a3-4c2d-831e-d9dc4243a670"),
                            addressId = new Guid("7e96df4a-2908-4f39-8cc0-ba710615b2af"),
                            auctionedPrice = 7500,
                            authorizedBidderPersonId = new Guid("69fdc285-dd45-4fb9-9bc8-c5e42428c9f4"),
                            buyerId = new Guid("f1053e62-7e19-47cd-afcb-4d360838793e"),
                            circle = 1,
                            date = new DateTime(2023, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            depositTopUpAmount = 500,
                            excepted = false,
                            initialPricePerHectare = 5000,
                            leasePeriod = 12,
                            numberOfParticipants = 10,
                            statusOfPublicBiddingId = new Guid("8587d9ba-baa5-44d0-9e47-50e0253bfa9b"),
                            timeOfBeginning = new DateTime(2023, 2, 17, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            timeOfEnd = new DateTime(2023, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            typePublicBiddingId = new Guid("e7ab1800-0064-49fc-9671-82a45ddc53f2"),
                            userId = new Guid("492f1a72-7ba4-4f7b-aa25-cffb8903ed48")
                        },
                        new
                        {
                            publicBiddingId = new Guid("cba217a7-7e8e-48a8-813a-9404cebf8f56"),
                            addressId = new Guid("7e96df4a-2908-4f39-8cc0-ba710615b2af"),
                            auctionedPrice = 6000,
                            authorizedBidderPersonId = new Guid("69fdc285-dd45-4fb9-9bc8-c5e42428c9f4"),
                            buyerId = new Guid("f1053e62-7e19-47cd-afcb-4d360838793e"),
                            circle = 1,
                            date = new DateTime(2023, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            depositTopUpAmount = 400,
                            excepted = false,
                            initialPricePerHectare = 4000,
                            leasePeriod = 12,
                            numberOfParticipants = 10,
                            statusOfPublicBiddingId = new Guid("97c0078f-d01d-4d14-8a9c-46b0af243ed0"),
                            timeOfBeginning = new DateTime(2023, 2, 18, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            timeOfEnd = new DateTime(2023, 2, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            typePublicBiddingId = new Guid("98ce7dce-7f2a-4142-85ef-c261c76c76c2"),
                            userId = new Guid("7836e78d-26d4-441d-843f-21062cda2240")
                        });
                });

            modelBuilder.Entity("PublicBidding.Entities.StatusOfPublicBidding", b =>
                {
                    b.Property<Guid>("statusOfPublicBiddingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("statusOfPublicBiddingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("statusOfPublicBiddingId");

                    b.ToTable("statusesOfPublicBidding");

                    b.HasData(
                        new
                        {
                            statusOfPublicBiddingId = new Guid("8587d9ba-baa5-44d0-9e47-50e0253bfa9b"),
                            statusOfPublicBiddingName = "Prvi krug"
                        },
                        new
                        {
                            statusOfPublicBiddingId = new Guid("97c0078f-d01d-4d14-8a9c-46b0af243ed0"),
                            statusOfPublicBiddingName = "Drugi krug sa starim uslovima"
                        },
                        new
                        {
                            statusOfPublicBiddingId = new Guid("a3fc511f-9d3e-4da6-82bb-20e289e9702f"),
                            statusOfPublicBiddingName = "Drugi krug sa novim uslovima"
                        });
                });

            modelBuilder.Entity("PublicBidding.Entities.TypeOfPublicBidding", b =>
                {
                    b.Property<Guid>("typePublicBiddingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("typePublicBiddingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typePublicBiddingId");

                    b.ToTable("typesOfPublicBidding");

                    b.HasData(
                        new
                        {
                            typePublicBiddingId = new Guid("e7ab1800-0064-49fc-9671-82a45ddc53f2"),
                            typePublicBiddingName = "Javna licitacija"
                        },
                        new
                        {
                            typePublicBiddingId = new Guid("98ce7dce-7f2a-4142-85ef-c261c76c76c2"),
                            typePublicBiddingName = "Javno otvaranje zatvorenih ponuda"
                        });
                });

            modelBuilder.Entity("PublicBidding.Entities.Licitation", b =>
                {
                    b.HasOne("PublicBidding.Entities.PublicBidding", "publicBidding")
                        .WithMany()
                        .HasForeignKey("publicBiddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("publicBidding");
                });

            modelBuilder.Entity("PublicBidding.Entities.PublicBidding", b =>
                {
                    b.HasOne("PublicBidding.Entities.StatusOfPublicBidding", "statusOfPublicBidding")
                        .WithMany()
                        .HasForeignKey("statusOfPublicBiddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublicBidding.Entities.TypeOfPublicBidding", "typeOfPublicBidding")
                        .WithMany()
                        .HasForeignKey("typePublicBiddingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("statusOfPublicBidding");

                    b.Navigation("typeOfPublicBidding");
                });
#pragma warning restore 612, 618
        }
    }
}
